{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Website for API\
https://openweathermap.org/forecast16\
\
RAW DATA
\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf2 \{"city":\{"id":0,"name":"Mountain View","coord":\{"lon":-122.088,"lat":37.3855\},"country":"US","population":0\},"cod":"200","message":2.1505307,"cnt":7,"list":[\{"dt":1519070400,"temp":\{"day":283.99,"min":271.86,"max":283.99,"night":271.86,"eve":278.3,"morn":280.44\},"pressure":989.94,"humidity":52,"weather":[\{"id":500,"main":"Rain","description":"light rain","icon":"10d"\}],"speed":3.36,"deg":325,"clouds":20,"rain":0.31\},\{"dt":1519156800,"temp":\{"day":282.68,"min":268.17,"max":282.68,"night":271.62,"eve":277.16,"morn":268.17\},"pressure":996.36,"humidity":50,"weather":[\{"id":800,"main":"Clear","description":"sky is clear","icon":"01d"\}],"speed":1.25,"deg":245,"clouds":0\},\{"dt":1519243200,"temp":\{"day":280.88,"min":271.62,"max":280.98,"night":274.19,"eve":277.8,"morn":271.62\},"pressure":996.59,"humidity":84,"weather":[\{"id":500,"main":"Rain","description":"light rain","icon":"10d"\}],"speed":1.46,"deg":232,"clouds":92,"rain":1.3\},\{"dt":1519329600,"temp":\{"day":283.8,"min":282.02,"max":285.94,"night":284.02,"eve":285.94,"morn":282.02\},"pressure":1014.12,"humidity":0,"weather":[\{"id":501,"main":"Rain","description":"moderate rain","icon":"10d"\}],"speed":6.4,"deg":173,"clouds":57,"rain":11.41\},\{"dt":1519416000,"temp":\{"day":284.36,"min":281.5,"max":285.85,"night":281.5,"eve":285.85,"morn":283.32\},"pressure":1014.73,"humidity":0,"weather":[\{"id":501,"main":"Rain","description":"moderate rain","icon":"10d"\}],"speed":4.23,"deg":114,"clouds":89,"rain":9.29\},\{"dt":1519502400,"temp":\{"day":285.58,"min":279.27,"max":288.96,"night":282.02,"eve":288.96,"morn":279.27\},"pressure":1015.81,"humidity":0,"weather":[\{"id":500,"main":"Rain","description":"light rain","icon":"10d"\}],"speed":1.27,"deg":57,"clouds":9\},\{"dt":1519588800,"temp":\{"day":287.05,"min":279.96,"max":290.51,"night":282.65,"eve":290.51,"morn":279.96\},"pressure":1012.12,"humidity":0,"weather":[\{"id":800,"main":"Clear","description":"sky is clear","icon":"01d"\}],"speed":1.75,"deg":54,"clouds":1\}]\}\
\
http://jsonviewer.stack.hu/\
https://app.quicktype.io/\
\
#I wonder if there is a way to make a two columns in a .rtf?\
OBJECTIVE-C versions\
// \cf2 \outl0\strokewidth0 IACDailyForecastObject.h\cf2 \outl0\strokewidth0 \strokec2 \
\
#import <Foundation/Foundation.h>\
\
@class \cf2 \outl0\strokewidth0 IACDailyForecastObject\cf2 \outl0\strokewidth0 \strokec2 ;\
@class IACCity;\
@class IACCoord;\
@class IACList;\
@class IACTemp;\
@class IACWeather;\
\
NS_ASSUME_NONNULL_BEGIN\
\
#pragma mark - Object interfaces\
\
@interface IACMessageThread : NSObject\
@property (nonatomic, strong) IACCity *city;\
@property (nonatomic, copy)   NSString *cod;\
@property (nonatomic, assign) double message;\
@property (nonatomic, assign) NSInteger cnt;\
@property (nonatomic, copy)   NSArray<IACList *> *list;\
@end\
\
@interface IACCity : NSObject\
@property (nonatomic, assign) NSInteger identifier;\
@property (nonatomic, copy)   NSString *name;\
@property (nonatomic, strong) IACCoord *coord;\
@property (nonatomic, copy)   NSString *country;\
@property (nonatomic, assign) NSInteger population;\
@end\
\
@interface IACCoord : NSObject\
@property (nonatomic, assign) double lon;\
@property (nonatomic, assign) double lat;\
@end\
\
@interface IACList : NSObject\
@property (nonatomic, assign)           NSInteger dt;\
@property (nonatomic, strong)           IACTemp *temp;\
@property (nonatomic, assign)           double pressure;\
@property (nonatomic, assign)           NSInteger humidity;\
@property (nonatomic, copy)             NSArray<IACWeather *> *weather;\
@property (nonatomic, assign)           double speed;\
@property (nonatomic, assign)           NSInteger deg;\
@property (nonatomic, assign)           NSInteger clouds;\
@property (nonatomic, nullable, strong) NSNumber *rain;\
@end\
\
@interface IACTemp : NSObject\
@property (nonatomic, assign) double day;\
@property (nonatomic, assign) double min;\
@property (nonatomic, assign) double max;\
@property (nonatomic, assign) double night;\
@property (nonatomic, assign) double eve;\
@property (nonatomic, assign) double morn;\
@end\
\
@interface IACWeather : NSObject\
@property (nonatomic, assign) NSInteger identifier;\
@property (nonatomic, copy)   NSString *main;\
@property (nonatomic, copy)   NSString *theDescription;\
@property (nonatomic, copy)   NSString *icon;\
@end\
\
NS_ASSUME_NONNULL_END\
\
// \cf2 \outl0\strokewidth0 IACDailyForecastObject.m\cf2 \outl0\strokewidth0 \strokec2 \
\
#import "IACDailyForecastObject.h"\
\
@implementation \cf2 \outl0\strokewidth0 IACDailyForecastObject.h\cf2 \outl0\strokewidth0 \strokec2 \
@end\
\
@implementation IACCity\
@end\
\
@implementation IACCoord\
@end\
\
@implementation IACList\
@end\
\
@implementation IACTemp\
@end\
\
@implementation IACWeather\
@end\
\
\
SWIFT \
// To parse the JSON, add this file to your project and do:\
//   let messageThread = try? newJSONDecoder().decode(MessageThread.self, from: jsonData)\
\
import Foundation\
\
struct DailyForecastObject: Codable \{\
    let city: City?\
    let cod: String?\
    let message: Double?\
    let cnt: Int?\
    let list: [List]?\
\}\
\
struct City: Codable \{\
    let id: Int?\
    let name: String?\
    let coord: Coord?\
    let country: String?\
    let population: Int?\
\}\
\
struct Coord: Codable \{\
    let lon, lat: Double?\
\}\
\
struct List: Codable \{\
    let dt: Int?\
    let temp: Temp?\
    let pressure: Double?\
    let humidity: Int?\
    let weather: [Weather]?\
    let speed: Double?\
    let deg, clouds: Int?\
    let rain: Double?\
\}\
\
struct Temp: Codable \{\
    let day, min, max, night: Double?\
    let eve, morn: Double?\
\}\
\
struct Weather: Codable \{\
    let id: Int?\
    let main, description, icon: String?\
\}\
}